from flask import Flask, request, jsonify
import requests
import replicate


app = Flask(__name__)
system_prompt="""You are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature.

If a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don't know the answer to a question, please don't share false information."""


@app.route('/', methods=['Get'])
def home():
       return "<h1> Welcometo to Text generter Tool</h1>"
 



@app.route('/generate-response', methods=['POST'])
def generate_response():
    try:
        # Get input data from the request
        data = request.get_json()

        # Validate input JSON
        if not data or 'prompt' not in data:
            return jsonify({"error": "Invalid input, 'prompt' is required"}), 400

        # Prepare request headers for Hugging Face API
        # headers = {"Authorization": f"Bearer {hugging_face_key}"}
        
        # Call the Hugging Face LLM API with the user's input
        prompt=data.get('prompt')
        inp = {
    "prompt": prompt,
    "system_prompt":system_prompt,
    "max_new_tokens": 512,
    "prompt_template": "<|begin_of_text|><|start_header_id|>system<|end_header_id|>\n\n{system_prompt}<|eot_id|><|start_header_id|>user<|end_header_id|>\n\n{prompt}<|eot_id|><|start_header_id|>assistant<|end_header_id|>\n\n"
}
        client=replicate.Client(api_token="r8_IOgomoVv7JAXHXRWaqCNxiKOFCaeFbU3TnFYT")


        response_out= client.run(
    "meta/meta-llama-3-8b-instruct",
    
    input=inp
)
       
#=> "The number of parameters in a neural network can impact ...

        # Check if the LLM API request was successful
        response=str("".join(response_out))
        # if response.status_code != 200:
        #     return jsonify({"error": "Failed to fetch response from gpt2 API", "details": response.json()}), 500

        # Return the generated response from the LLM
        # llm_response = response.json()
        # generated_text = llm_response[0].get('generated_text', '').strip()
        return  "<h1> {response}</h1>", 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
